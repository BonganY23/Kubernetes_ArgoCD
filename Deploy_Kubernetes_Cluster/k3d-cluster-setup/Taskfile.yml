version: '3'

dotenv: ['.env']

tasks:
  setup:
    cmds:
      - task: install_k3d
      - task: create_cluster
      - task: verify_cluster
      - task: switch_context
      - task: install_argocd
      - task: install_strimzi_kafka
      - task: finalizing_cluster
      - task: print_setup_complete

  install_k3d:
    cmds:
      - wget -q -O - https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh | bash
    desc: Install k3d

  create_cluster:
    cmds:
      - unset KUBECONFIG; k3d cluster create -i rancher/k3s:v1.30.0-rc1-k3s1 -s 3 -p "443:443@loadbalancer" -p "80:80@loadbalancer" ch10-crossplane
    desc: Create Kubernetes cluster with k3d

  verify_cluster:
    cmds:
      - echo "Verifying k3d cluster status..."
      - until k3d cluster list | grep -q '3/3'; do
          k3d cluster list;
          sleep 3;
        done
      - echo "Cluster is up and running:"
      - k3d cluster list
    desc: Verify k3d cluster is running

  switch_context:
    cmds:
      - kubectl config use-context k3d-ch10-crossplane
    desc: Switch context to k3d-ch10-crossplane

  install_argocd:
    cmds:
      - kubectl create namespace argocd ; kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
      - VERSION=$(curl -sSL https://raw.githubusercontent.com/argoproj/argo-cd/stable/VERSION)
      - curl -sSL -o argocd-linux-arm64 "https://github.com/argoproj/argo-cd/releases/download/v$VERSION/argocd-linux-arm64"
      - sudo install -m 555 argocd-linux-arm64 /usr/local/bin/argocd
      - rm argocd-linux-arm64
      - sudo mkdir -p /etc/containerd
      - containerd config default | sudo tee /etc/containerd/config.toml > /dev/null
      - |
          sudo sed -i '/\[plugins."io.containerd.grpc.v1.cri".registry\]/a\
          [plugins."io.containerd.grpc.v1.cri".registry.configs."quay.io".tls]\
            insecure_skip_verify = true' /etc/containerd/config.toml

      - kubectl -n argocd rollout restart deployment argocd-server
    
      - kubectl apply -f ../../Ingress/argocd-ingress.yaml
      - kubectl apply -f ../../applications/argo_apps_manifests/demo-app.yaml
      - |
          kubectl -n argocd patch configmap argocd-cm --type merge -p "$(cat <<EOF
          data:
            repositories: |
              - url: https://github.com/BonganY23/k3d.git
                type: git
                insecure: true
          EOF
          )"
      - kubectl delete pod -n argocd -l app.kubernetes.io/name=argocd-repo-server
      - |
          echo "Waiting for all Argo CD pods to be ready..."
          until kubectl get pods -n argocd | grep -v NAME | awk '{print $3}' | grep -v -E 'Running|Completed' > /dev/null; do
            kubectl get pods -n argocd
            sleep 5
          done
          echo "All Argo CD pods are running."
      - kubectl -n argocd patch svc argocd-server -p '{"spec":{"ports":[
          {"name":"http","port":80,"targetPort":8080},
          {"name":"https","port":443,"targetPort":8083}
        ]}}'
      - kubectl -n argocd patch deployment argocd-server --type='json' -p='[{"op":"add","path":"/spec/template/spec/containers/0/args/-","value":"--insecure"}]'
      - kubectl rollout restart deploy argocd-server -n argocd
      - echo "You can access the Argo with the following URL: https://argocd.bogomil-test.com:8080"

  install_strimzi_kafka:
    cmds:
      - kubectl apply -f ../../applications/argo_apps_manifests/strimzi-kafka.yaml

  finalizing_cluster:
    cmds:
      - k3d node create ch10-crossplane-worker   --cluster ch10-crossplane   --replicas 3   --role agent   --image rancher/k3s:v1.30.0-rc1-k3s1
      - sed -i 's/0.0.0.0/127.0.0.1/g' ~/.kube/config  
 
  print_setup_complete:
    cmds:
      - echo "Local Packt Management Kubernetes server is set up. Author - Bogomil Kovachev."
    desc: Print setup completion message
